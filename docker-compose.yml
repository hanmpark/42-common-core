services: 
  traefik:
    image: traefik:v2.5
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    networks:
      - transcendance
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    image: postgres
    restart: always
    env_file: .env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - transcendance

  frontend:
    build: ./frontend
    restart: always
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - transcendance

  backend:
    build: ./backend
    restart: always
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api/`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - transcendance
    volumes:
      - ./data/exports:/exports

  gameserver:
    build: ./gameserver-v2
    restart: always
    env_file: .env
    ports:
      - 8080:8080
    networks:
      - transcendance

  # prometheus:
  #   image: prom/prometheus
  #   restart: always
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #   ports:
  #     - 9090:9090
  #   networks:
  #     - transcendance

  # grafana:
  #   image: grafana/grafana
  #   restart: always
  #   env_file: .env
  #   volumes:
  #     - ./grafana:/var/lib/grafana
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - transcendance

  harvester:
    build: ./harvester
    restart: always
    env_file: .env
    volumes:
      - ./data/exports:/exports
    networks:
      - transcendance

networks:
  transcendance:
    driver: bridge