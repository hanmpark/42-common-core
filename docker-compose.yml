services:
  traefik:
    image: traefik:v2.5
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    networks:
      - transcendence
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    image: postgres
    restart: always
    env_file: .env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - transcendence

  frontend:
    build: ./frontend
    restart: always
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - transcendence

  backend:
    build: ./backend
    restart: always
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - transcendence
    volumes:
      - ./data/exports:/exports

  gameserver:
    build: ./gameserver-v2
    restart: always
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gameserver.rule=PathPrefix(`/ws`)"
      - "traefik.http.services.gameserver.loadbalancer.server.port=8080"
    ports:
      - 8080:8080
    networks:
      - transcendence

  harvester:
    build: ./harvester
    restart: always
    env_file: .env
    volumes:
      - ./data/exports:/exports
    networks:
      - transcendence

networks:
  transcendence:
    driver: bridge