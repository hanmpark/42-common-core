services:
  # MAJOR: Infrastructure setup with ELK
  # elasticsearch:
  #   image: bitnami/elasticsearch:latest
  #   environment:
  #     - ELASTICSEARCH_HEAP_SIZE=1024m
  #   volumes:
  #     - elasticsearch_data:/bitnami/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - transcendence

  # logstash:
  #   image: bitnami/logstash:latest
  #   environment:
  #     - LOGSTASH_ELASTICSEARCH_URL=elasticsearch
  #     - LOGSTASH_ELASTICSEARCH_PORT_NUMBER=9200
  #   volumes:
  #     - ./.config/logstash/config.conf:/opt/bitnami/logstash/pipeline/logstash.conf
  #     - logstash_data:/bitmani
  #   ports:
  #     - "5500:5500"
  #     - "12201:12201/udp"
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - transcendence

  # kibana:
  #   image: bitnami/kibana:latest
  #   environment:
  #     - KIBANA_ELASTICSEARCH_URL=elasticsearch
  #     - KIBANA_ELASTICSEARCH_PORT_NUMBER=9200
  #   volumes:
  #     - kibana_data:/bitnami/kibana
  #   ports:
  #     - "5601:5601"
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - transcendence

  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./.config/prometheus/config.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - transcendence

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - transcendence

  traefik:
    image: traefik:v2.5
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    networks:
      - transcendence
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:80"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 3

  postgres:
    image: postgres
    restart: always
    env_file: .env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - transcendence
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
    #   interval: 15s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s

  # frontend:
  #   build: ./frontend
  #   restart: always
  #   env_file: .env
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
  #     - "traefik.http.services.frontend.loadbalancer.server.port=3000"
  #   networks:
  #     - transcendence
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://localhost:"
  #       tag: "frontend"
    # depends_on:
    #   backend:
    #     condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 3

  backend:
    build: ./backend
    restart: always
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - transcendence
    volumes:
      - ./data/exports:/exports
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "frontend"
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 3

  # gameserver:
  #   build: ./gameserver-v2
  #   restart: always
  #   env_file: .env
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.gameserver.rule=PathPrefix(`/ws`)"
  #     - "traefik.http.services.gameserver.loadbalancer.server.port=8080"
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - transcendence
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://localhost:12201"
  #       tag: "frontend"
    # depends_on:
    #   backend:
    #     condition: service_healthy

  # harvester:
  #   build: ./harvester
  #   restart: always
  #   env_file: .env
  #   volumes:
  #     - ./data/exports:/exports
  #   networks:
  #     - transcendence
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: "udp://localhost:12201"
  #       tag: "frontend"
    # depends_on:
    #   postgres:
    #     condition: service_healthy

networks:
  transcendence:
    driver: bridge

volumes:
  elasticsearch_data:
  logstash_data:
  kibana_data: